/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.31).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package mx.uam.tsis.proyecto.api;

import mx.uam.tsis.proyecto.api.dto.ErrorDto;
import mx.uam.tsis.proyecto.api.dto.ListaProductosDto;
import mx.uam.tsis.proyecto.api.dto.ProductoDto;
import mx.uam.tsis.proyecto.api.dto.TiposProductoDto;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2022-04-21T15:29:56.516895-05:00[America/Mexico_City]")
@Validated
public interface V1Api {

    @Operation(summary = "Permite dar de alta un producto", description = "Permite dar de alta un producto, se valida que dicho producto no haya sido dado de alta previamente con el mismo nombre (SS-215)", tags={ "productos" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "201", description = "Creación exitosa", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ProductoDto.class))),
        
        @ApiResponse(responseCode = "400", description = "No se pudo crear el producto exitosamente", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDto.class))),
        
        @ApiResponse(responseCode = "500", description = "Error interno durante la consulta", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDto.class))) })
    @RequestMapping(value = "/v1/productos",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<ProductoDto> createProduct(@Parameter(in = ParameterIn.DEFAULT, description = "", schema=@Schema()) @Valid @RequestBody ProductoDto body);


    @Operation(summary = "Permite borrar un producto a partir de su id", description = "", tags={ "productos" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "204", description = "Se borró exitosamente el producto"),
        
        @ApiResponse(responseCode = "404", description = "El recurso no existe", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDto.class))) })
    @RequestMapping(value = "/v1/productos/{productoId}",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteProduct(@Parameter(in = ParameterIn.PATH, description = "el identificador del producto generado durante la invocación a POST", required=true, schema=@Schema()) @PathVariable("productoId") String productoId);


    @Operation(summary = "Permite recuperar productos con o sin filtro por tipo", description = "", tags={ "productos" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Se recuperaron exitosamente la lista de productos", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ListaProductosDto.class))),
        
        @ApiResponse(responseCode = "400", description = "El parámetro es inválido", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDto.class))),
        
        @ApiResponse(responseCode = "500", description = "Error interno durante la consulta", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDto.class))) })
    @RequestMapping(value = "/v1/productos",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<ListaProductosDto> getAllProducts(@Parameter(in = ParameterIn.QUERY, description = "filtro por tipo de producto" ,schema=@Schema()) @Valid @RequestParam(value = "tipoProducto", required = false) String tipoProducto);


    @Operation(summary = "Permite recuperar un producto a partir de su id", description = "", tags={ "productos" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Se recuperó exitosamente el producto", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ProductoDto.class))),
        
        @ApiResponse(responseCode = "404", description = "El recurso no existe", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDto.class))) })
    @RequestMapping(value = "/v1/productos/{productoId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<ProductoDto> getProduct(@Parameter(in = ParameterIn.PATH, description = "el identificador del producto generado durante la invocación a POST", required=true, schema=@Schema()) @PathVariable("productoId") String productoId);


    @Operation(summary = "Permite recuperar la lista de tipos de producto", description = "Regresa un objecto que contiene el catálogo de tipos de productos (poner todos los detalles necesarios)", tags={ "tiposProducto" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Consulta exitosa", content = @Content(mediaType = "application/json", schema = @Schema(implementation = TiposProductoDto.class))),
        
        @ApiResponse(responseCode = "500", description = "Error interno durante la consulta", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDto.class))) })
    @RequestMapping(value = "/v1/tiposProducto",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TiposProductoDto> getProductTypes();


    @Operation(summary = "Permite actualizar un producto a partir de su id", description = "Se debe enviar un objeto JSON con las propiedades a actualizar (excepto id)", tags={ "productos" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Se actualizó exitosamente el producto", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ProductoDto.class))),
        
        @ApiResponse(responseCode = "400", description = "No se pudo actualizar exitosamente (propiedades no existentes o envío de id en el cuerpo)", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDto.class))),
        
        @ApiResponse(responseCode = "404", description = "El recurso no existe", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorDto.class))) })
    @RequestMapping(value = "/v1/productos/{productoId}",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.PATCH)
    ResponseEntity<ProductoDto> updateProduct(@Parameter(in = ParameterIn.PATH, description = "el identificador del producto generado durante la invocación a POST", required=true, schema=@Schema()) @PathVariable("productoId") String productoId, @Parameter(in = ParameterIn.DEFAULT, description = "", schema=@Schema()) @Valid @RequestBody ProductoDto body);

}

